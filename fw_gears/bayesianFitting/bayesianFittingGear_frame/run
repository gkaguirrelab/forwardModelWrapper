#!/usr/bin/python3

import os
import json

# Flywheel path
flywheel_base ='/flywheel/v0/'

# Path to input folder 
native_mgz_maps_folder = os.path.join(flywheel_base, 'input/NativeMgzMaps')
struct_zip_folder = os.path.join(flywheel_base, 'input/structZipPath')

# Set path to required inputs
native_mgz_maps_zip_path = os.path.join(native_mgz_maps_folder, os.listdir(native_mgz_maps_folder)[0])
struct_zip_path = os.path.join(struct_zip_folder, os.listdir(struct_zip_folder)[0])

# Set other paths
manifest_file = os.path.join(flywheel_base, 'manifest.json')
config_path = os.path.join(flywheel_base, 'config.json')
first_output_dir = '/firstOutput'
final_output_dir = os.path.join(flywheel_base, 'output')
workbench_path = '/usr/bin/wb_command'
path_to_python_func = '/opt/make_fsaverage.py'

os.system('mkdir %s'%first_output_dir)

################### Unzip and set more paths ##################################

os.system('%s %s'%unzip)


###################Parse Config Here############################

with open(config_path) as config_file:
    job_config = json.load(config_file)
config = job_config['config']

verbose = config['verbose']
dataFileType = config['dataFileType']
dataSourceType = config['dataSourceType']
trimDummyStimTRs = config['trimDummyStimTRs']
averageAcquisitions = config['averageAcquisitions']
tr = config['tr']
wantglmdenoise = config['wantglmdenoise']
maxpolydeg = config['maxpolydeg']
seedmode = config['seedmode']
xvalmode = config['xvalmode']
numperjob = config['numperjob']
maxiter = config['maxiter']
display = config['display']
typicalgain = config['typicalgain']
pixelsPerDegree = config['pixelsPerDegree']
screenMagnification = config['screenMagnification']
RegName = config['RegName']

###################Run Algorithm################################
    
cmd = """%s %s '%s' '%s' '%s' 'maskFilePath' '%s' 'hrfFilePath' '%s' \
'verbose' '%s' 'dataFileType' '%s' 'dataSourceType' '%s' 'trimDummyStimTRs' '%s' \
'averageAcquisitions' '%s' 'tr' '%s' 'wantglmdenoise' '%s' 'maxpolydeg' '%s' \
'seedmode' '%s' 'xvalmode' '%s' 'numperjob' '%s' 'maxiter' '%s' 'display' '%s' \
'typicalgain' '%s' 'pixelsPerDegree' '%s' 'screenMagnification' '%s' 'externalMGZMakerPath' '%s' 'RegName' '%s' 'workbenchPath' '%s' 'outPath' '%s'""" %(matlab_func, 
mcr_path, func_zip_path, stim_file_path, struct_zip_path,
mask_file_path, hrf_file_path, verbose, dataFileType, dataSourceType,
trimDummyStimTRs, averageAcquisitions, tr, wantglmdenoise, maxpolydeg,
seedmode, xvalmode, numperjob, maxiter, display, typicalgain, pixelsPerDegree,
screenMagnification, path_to_python_func, RegName, workbench_path, first_output_dir)

os.system(cmd)        
################## Zip everything and output ##################################
os.system('mv %s %s'%(os.path.join(first_output_dir,'raw_retinotopy_results.mat'), os.path.join(final_output_dir,'raw_retinotopy_results.mat'))) 
os.system('mv %s %s'%(os.path.join(first_output_dir,'modified_retinotopy_results.mat'), os.path.join(final_output_dir,'modified_retinotopy_results.mat')))
 
os.system('zip -r %s %s'%(os.path.join(final_output_dir,'maps_cifti.zip'), os.path.join(first_output_dir,'maps_cifti')))
os.system('zip -r %s %s'%(os.path.join(final_output_dir,'maps_nativeMGZ.zip'), os.path.join(first_output_dir,'maps_nativeMGZ')))
os.system('zip -r %s %s'%(os.path.join(final_output_dir,'maps_nativeMGZ_pseudoHemisphere.zip'), os.path.join(first_output_dir,'maps_nativeMGZ_pseudoHemisphere')))
