#!/usr/bin/python3

import os
os.system("mv /usr/local/MATLAB/MATLAB_Runtime/v97/bin/glnxa64/libexpat.so.1 /usr/local/MATLAB/MATLAB_Runtime/v97/bin/glnxa64/libexpat.so.1-appended")
import json

os.system('cat /proc/cpuinfo')

# Flywheel path
flywheel_base ='/flywheel/v0/'

# Path to input folder 
func_zip_folder = os.path.join(flywheel_base, 'input/funcZipPath')
stim_file_folder = os.path.join(flywheel_base, 'input/stimFilePath')
struct_zip_folder = os.path.join(flywheel_base, 'input/structZipPath')
hrf_file_folder = os.path.join(flywheel_base, 'input/hrfFilePath')
mask_file_folder = os.path.join(flywheel_base, 'input/maskFilePath')
payload_file_folder = os.path.join(flywheel_base, 'input/payloadFilePath')

# Set path to required inputs
func_zip_path = os.path.join(func_zip_folder, os.listdir(func_zip_folder)[0])
stim_file_path = os.path.join(stim_file_folder, os.listdir(stim_file_folder)[0])
struct_zip_path = os.path.join(struct_zip_folder, os.listdir(struct_zip_folder)[0])

# Set path to optional paths
if os.path.isdir(hrf_file_folder) == True:
    hrf_file_path = os.path.join(hrf_file_folder, os.listdir(hrf_file_folder)[0])
else:
    hrf_file_path = 'Na'
    
if os.path.isdir(mask_file_folder) == True:    
    mask_file_path = os.path.join(mask_file_folder, os.listdir(mask_file_folder)[0])
else:
    mask_file_path = 'Na'
if os.path.isdir(payload_file_folder) == True:    
    payload_file_path = os.path.join(mask_file_folder, os.listdir(payload_file_folder)[0])
else:
    payload_file_path = 'Na'


# Set other paths
manifest_file = os.path.join(flywheel_base, 'manifest.json')
config_path = os.path.join(flywheel_base, 'config.json')
matlab_func = '/opt/func_input/run_mainPRF.sh'
first_output_dir = '/firstOutput'
final_output_dir = os.path.join(flywheel_base, 'output')
mcr_path = '/usr/local/MATLAB/MATLAB_Runtime/v97' #path to MATLAB runtime
workbench_path = '/usr/bin/wb_command'
path_to_python_func = '/opt/make_fsaverage.py'

os.system('mkdir %s'%first_output_dir)
###################Parse Config Here############################

with open(config_path) as config_file:
    job_config = json.load(config_file)
config = job_config['config']

dataFileType = config['dataFileType']
dataSourceType = config['dataSourceType']
trimDummyStimTRs = config['trimDummyStimTRs']
averageAcquisitions = config['averageAcquisitions']
tr = config['tr']
RegName = config['RegName']
modelClass = config['modelClass']
modelOpts = config['modelOpts']

###################Run Algorithm################################
    
cmd = """%s %s '%s' '%s' '%s' 'maskFilePath' '%s' 'hrfFilePath' '%s' \
'payloadFilePath' '%s' 'dataFileType' '%s' 'dataSourceType' '%s' \
'trimDummyStimTRs' '%s' 'averageAcquisitions' '%s' 'tr' '%s' \
'externalMGZMakerPath' '%s' 'RegName' '%s' 'modelClass' '%s' 'modelOpts' '%s' \
'workbenchPath' '%s' 'outPath' '%s'""" % (matlab_func, mcr_path, func_zip_path, 
stim_file_path, struct_zip_path, mask_file_path, hrf_file_path, 
payload_file_path, dataFileType, dataSourceType, trimDummyStimTRs, 
averageAcquisitions, tr, path_to_python_func, RegName, modelClass, modelOpts,
workbench_path, first_output_dir)

os.system(cmd)        

################## Zip everything and output ##################################

# Move mat, pdf and png files to the final output folder
os.system('cd %s; mv %s %s/'%(first_output_dir, '*.mat', final_output_dir)) 
os.system('cd %s; mv %s %s/'%(first_output_dir, '*.pdf', final_output_dir)) 
os.system('cd %s; mv %s %s/'%(first_output_dir, '*.png', final_output_dir)) 

# Zip and move the maps
os.system('cd %s; zip -q -r %s *'%(os.path.join(first_output_dir,'maps_cifti'), os.path.join(final_output_dir,'maps_cifti.zip')))
os.system('cd %s; zip -q -r %s *'%(os.path.join(first_output_dir,'maps_nativeMGZ'), os.path.join(final_output_dir,'maps_nativeMGZ.zip')))
os.system('cd %s; zip -q -r %s *'%(os.path.join(first_output_dir,'maps_nativeMGZ_pseudoHemisphere'), os.path.join(final_output_dir,'maps_nativeMGZ_pseudoHemisphere.zip')))
