#!/usr/bin/python3

import os
os.system("mv /usr/local/MATLAB/MATLAB_Runtime/v97/bin/glnxa64/libexpat.so.1 /usr/local/MATLAB/MATLAB_Runtime/v97/bin/glnxa64/libexpat.so.1-appended")
import json
import nilearn
from nilearn import plotting

os.system('cat /proc/cpuinfo')

# Flywheel path
flywheel_base ='/flywheel/v0/'

# Path to input folder 
func_zip_folder01 = os.path.join(flywheel_base, 'input/funcZip01')
func_zip_folder02 = os.path.join(flywheel_base, 'input/funcZip02')
func_zip_folder03 = os.path.join(flywheel_base, 'input/funcZip03')
func_zip_folder04 = os.path.join(flywheel_base, 'input/funcZip04')
func_zip_folder05 = os.path.join(flywheel_base, 'input/funcZip05')
func_zip_folder06 = os.path.join(flywheel_base, 'input/funcZip06')
func_zip_folder07 = os.path.join(flywheel_base, 'input/funcZip07')
func_zip_folder08 = os.path.join(flywheel_base, 'input/funcZip08')
func_zip_folder09 = os.path.join(flywheel_base, 'input/funcZip09')
func_zip_folder10 = os.path.join(flywheel_base, 'input/funcZip10')
stim_file_folder = os.path.join(flywheel_base, 'input/stimFile')
struct_zip_folder = os.path.join(flywheel_base, 'input/structZip')
mask_file_folder = os.path.join(flywheel_base, 'input/maskFile')
payload_file_folder = os.path.join(flywheel_base, 'input/payloadFile')

# Set path to required inputs
func_zip_path01 = os.path.join(func_zip_folder01, os.listdir(func_zip_folder01)[0])
stim_file_path = os.path.join(stim_file_folder, os.listdir(stim_file_folder)[0])
struct_zip_path = os.path.join(struct_zip_folder, os.listdir(struct_zip_folder)[0])

# Set path to optional paths   
if os.path.isdir(func_zip_folder02) == True:    
    func_zip_path02 = os.path.join(func_zip_folder02, os.listdir(func_zip_folder02)[0])
else:
    func_zip_path02 = 'Na'
if os.path.isdir(func_zip_folder03) == True:    
    func_zip_path03 = os.path.join(func_zip_folder03, os.listdir(func_zip_folder03)[0])
else:
    func_zip_path03 = 'Na'
if os.path.isdir(func_zip_folder04) == True:    
    func_zip_path04 = os.path.join(func_zip_folder04, os.listdir(func_zip_folder04)[0])
else:
    func_zip_path04 = 'Na'
if os.path.isdir(func_zip_folder05) == True:    
    func_zip_path05 = os.path.join(func_zip_folder05, os.listdir(func_zip_folder05)[0])
else:
    func_zip_path05 = 'Na'
if os.path.isdir(func_zip_folder06) == True:    
    func_zip_path06 = os.path.join(func_zip_folder06, os.listdir(func_zip_folder06)[0])
else:
    func_zip_path06 = 'Na'
if os.path.isdir(func_zip_folder07) == True:    
    func_zip_path07 = os.path.join(func_zip_folder07, os.listdir(func_zip_folder07)[0])
else:
    func_zip_path07 = 'Na'
if os.path.isdir(func_zip_folder08) == True:    
    func_zip_path08 = os.path.join(func_zip_folder08, os.listdir(func_zip_folder08)[0])
else:
    func_zip_path08 = 'Na'
if os.path.isdir(func_zip_folder09) == True:    
    func_zip_path09 = os.path.join(func_zip_folder09, os.listdir(func_zip_folder09)[0])
else:
    func_zip_path09 = 'Na'
if os.path.isdir(func_zip_folder10) == True:    
    func_zip_path10 = os.path.join(func_zip_folder10, os.listdir(func_zip_folder10)[0])
else:
    func_zip_path10 = 'Na'
if os.path.isdir(mask_file_folder) == True:    
    mask_file_path = os.path.join(mask_file_folder, os.listdir(mask_file_folder)[0])
else:
    mask_file_path = 'Na'
if os.path.isdir(payload_file_folder) == True:    
    payload_file_path = os.path.join(mask_file_folder, os.listdir(payload_file_folder)[0])
else:
    payload_file_path = 'Na'

# Set other paths
manifest_file = os.path.join(flywheel_base, 'manifest.json')
config_path = os.path.join(flywheel_base, 'config.json')
matlab_func = '/opt/func_input/run_mainWrapper.sh'
first_output_dir = '/firstOutput'
final_output_dir = os.path.join(flywheel_base, 'output')
mcr_path = '/usr/local/MATLAB/MATLAB_Runtime/v97' #path to MATLAB runtime
workbench_path = '/usr/bin/wb_command'
externalMGZMakerPath = '/opt/make_fsaverage.py'
externalMapGifMakerPath = '/opt/plot_maps.py'

os.system('mkdir %s'%first_output_dir)
###################Parse Config Here############################

with open(config_path) as config_file:
    job_config = json.load(config_file)
config = job_config['config']

dataFileType = config['dataFileType']
dataSourceType = config['dataSourceType']
trimDummyStimTRs = config['trimDummyStimTRs']
averageAcquisitions = config['averageAcquisitions']
tr = config['tr']
modelClass = config['modelClass']
averageVoxels = config['averageVoxels']
modelOpts = '{' + config['modelOpts'] + '}'

if dataSourceType == 'icafix':
    # Create a folder for hcpstruct config
    hcpconfpath = '/opt/hcpconf'
    os.system('mkdir %s' % hcpconfpath)
    
    # Extract the hcp config into the configfolder
    os.system('unzip -j %s \'*/*.json\' -d %s' % (struct_zip_path, hcpconfpath))
    
    hcpconfig = os.path.join(hcpconfpath, os.listdir(hcpconfpath)[0])
    with open(hcpconfig) as hcpconf:
        job_config2 = json.load(hcpconf)
    config2 = job_config2['config']
    
    subject_id = config2['Subject']
    RegName = config2['RegName']
elif dataSourceType == 'ldogfix': 
    # Create a folder for ldog subject file
    subjecttext = '/tmp/subjectPathFolder'
    os.system('mkdir %s' % subjecttext)
    os.system('unzip -j %s \'subject_id.txt\' -d %s' % (struct_zip_path, subjecttext))
    textfile = os.path.join(subjecttext, os.listdir(subjecttext)[0])
    with open (textfile, 'r') as idfile:
        subject_id = idfile.readlines()[0]
    RegName = 'Na'
###################Run Algorithm################################
    
cmd = """%s %s -mcruserdata ParallelProfile:/usr/flywheel.mlsettings '%s' '%s' '%s' '%s' '%s' '%s' '%s' '%s' '%s' '%s' '%s' '%s' 'maskFilePath' '%s' \
'payloadPath' '%s' 'dataFileType' '%s' 'dataSourceType' '%s' \
'trimDummyStimTRs' '%s' 'averageAcquisitions' '%s' 'tr' '%s' \
'externalMGZMakerPath' '%s' 'RegName' '%s' 'modelClass' '%s' 'modelOpts' '%s' \
'workbenchPath' '%s' 'outPath' '%s' 'flywheelFlag' '1' 'Subject' '%s' 'averageVoxels' '%s' externalMapGifMakerPath '%s'""" % (matlab_func, mcr_path, func_zip_path01, 
func_zip_path02, func_zip_path03, func_zip_path04, func_zip_path05, func_zip_path06,
func_zip_path07, func_zip_path08, func_zip_path09, func_zip_path10,
stim_file_path, struct_zip_path, mask_file_path, payload_file_path, dataFileType, 
dataSourceType, trimDummyStimTRs, averageAcquisitions, tr, externalMGZMakerPath, 
RegName, modelClass, modelOpts, workbench_path, first_output_dir, subject_id, averageVoxels, externalMapGifMakerPath)

os.system(cmd)        

################## Zip everything and output ##################################
# Move mat, pdf and png files to the final output folder
for i in os.listdir(first_output_dir):
    if os.path.splitext(i)[-1].lower() == '.mat' or os.path.splitext(i)[-1].lower() == '.pdf' or os.path.splitext(i)[-1].lower() == '.png':
        os.system('mv %s %s/'%(os.path.join(first_output_dir, i), final_output_dir)) 

if dataSourceType == 'icafix':
    # Zip and move the maps if they are there
    if os.path.exists((os.path.join(first_output_dir,'%s_maps_cifti' % subject_id))):
        os.system('cd %s; zip -q -r %s *'%(os.path.join(first_output_dir,'%s_maps_cifti' % subject_id), os.path.join(final_output_dir,'%s_maps_cifti.zip' % subject_id)))
    if os.path.exists((os.path.join(first_output_dir,'%s_maps_nativeMGZ' % subject_id))):
        os.system('cd %s; zip -q -r %s *'%(os.path.join(first_output_dir,'%s_maps_nativeMGZ' % subject_id), os.path.join(final_output_dir,'%s_maps_nativeMGZ.zip' % subject_id)))
    if os.path.exists((os.path.join(first_output_dir,'%s_maps_nativeMGZ_pseudoHemisphere' % subject_id))):    
        os.system('cd %s; zip -q -r %s *'%(os.path.join(first_output_dir,'%s_maps_nativeMGZ_pseudoHemisphere' % subject_id), os.path.join(final_output_dir,'%s_maps_nativeMGZ_pseudoHemisphere.zip' % subject_id)))

if dataSourceType == 'ldogfix':   
    # Plot maps on surface 
    
    # Set paths and unzip
    surface_items = '/tmp/surface_items'
    os.system('mkdir %s' % surface_items)
    os.system('unzip -j %s exvivo_warp_files.zip -d %s' % (struct_zip_path, surface_items))
    os.system('unzip -j %s Woofsurfer.zip -d %s' % (struct_zip_path, surface_items))    
    os.system('unzip -q %s/Atlas/Woofsurfer.zip -d %s/' % (surface_items, surface_items))
    os.system('unzip -q %s/Atlas/exvivo_warp_files.zip -d %s/' % (surface_items, surface_items))    
    
    # Set paths to the calculation files
    initial_linear = os.path.join(surface_items, 'exvivo_warp_files', 'initialLinearAnts.mat')
    secondary_linear = os.path.join(surface_items, 'exvivo_warp_files', 'secondLinearAnts.mat')
    warp = os.path.join(surface_items, 'exvivo_warp_files', 'toEx1Warp.nii.gz')
    register_dat = os.path.join(surface_items, 'exvivo_warp_files', 'register.dat')
    
    # Set paths to the surfaces 
    orig_image = os.path.join(surface_items, 'Woofsurfer', 'mri', 'T1.nii')
    lh_inf = os.path.join(surface_items, 'Woofsurfer', 'surf', 'lh.inflated')
    rh_inf = os.path.join(surface_items, 'Woofsurfer', 'surf', 'rh.inflated')
    lh_white = os.path.join(surface_items, 'Woofsurfer', 'surf', 'lh_white')
    rh_white = os.path.join(surface_items, 'Woofsurfer', 'surf', 'rh_white')
    
    # Do the surface interpolation 
    R2_map = os.path.join(first_output_dir,'%s_maps_volumetric' % subject_id, '%s_R2_map.nii.gz' % subject_id)
    interpolated_map = os.path.join(surface_items, '%s_surface_interpolated.nii.gz' % subject_id)
    os.system('/usr/lib/ants/antsApplyTransforms -d 3 -i %s -r % -o % -t %s -t %s -t %s' % (R2_map,
                                                                                            orig_image,
                                                                                            interpolated_map,
                                                                                            warp,
                                                                                            secondary_linear,
                                                                                            initial_linear))    
    
    # Make the left and right hemispheres ADD PATH HERE
    surfaces_folder = '/tmp/surfaces_folder'
    os.system('mri_vol2surf --mov %s --ref %s --reg %s --hemi %s --o %s' % (interpolated_map, interpolated_map, register_dat, 'lh', os.path.join(surfaces_folder, 'left_hemi.mgz')))
    os.system('mri_vol2surf --mov %s --ref %s --reg %s --hemi %s --o %s' % (interpolated_map, interpolated_map, register_dat, 'rh', os.path.join(surfaces_folder, 'right_hemi.mgz')))
  
    # Make the surface plots
    sulc_map_lh = os.path.join(surface_items, 'Woofsurfer', 'surf', 'lh.sulc')
    sulc_map_rh = os.path.join(surface_items, 'Woofsurfer', 'surf', 'rh.sulc')
    loaded_lh_data = nilearn.surface.load_surf_data(os.path.join(surfaces_folder, 'left_hemi.mgz'))
    loaded_rh_data = nilearn.surface.load_surf_data(os.path.join(surfaces_folder, 'right_hemi.mgz'))
    loaded_inflated_left = nilearn.surface.load_surf_mesh(lh_inf)
    loaded_inflated_right = nilearn.surface.load_surf_mesh(rh_inf)  
    os.system('mkdir %s/images' % first_output_dir)
    plot_folder = os.path.join(first_output_dir, 'images')
    plotting.plot_surf_stat_map(loaded_inflated_left, loaded_lh_data, bg_map=sulc_map_lh,
                                threshold=0.2, view='medial', title='left', output=os.path.join(plot_folder,'%s_left_medial.png' % subject_id))
    plotting.plot_surf_stat_map(loaded_inflated_left, loaded_lh_data, bg_map=sulc_map_lh,
                                threshold=0.2, view='lateral', title='left', output=os.path.join(plot_folder,'%s_left_lateral.png' % subject_id))    
    
    plotting.plot_surf_stat_map(loaded_inflated_right, loaded_rh_data, bg_map=sulc_map_rh,
                                threshold=0.2, view='medial', title='right', output=os.path.join(plot_folder,'%s_right_medial.png' % subject_id))   
    plotting.plot_surf_stat_map(loaded_inflated_right, loaded_rh_data, bg_map=sulc_map_rh,
                                threshold=0.2, view='lateral', title='right', output=os.path.join(plot_folder,'%s_right_lateral.png' % subject_id))     
    
    # First zip and output the results
    if os.path.exists((os.path.join(first_output_dir,'%s_maps_volumetric' % subject_id))):
        os.system('cd %s; zip -q -r %s *'%(os.path.join(first_output_dir,'%s_maps_volumetric' % subject_id), os.path.join(final_output_dir,'%s_maps_volumetric.zip' % subject_id)))
    
    # Move all the gifs and images into another folder   
    saggital_gif = os.path.join(first_output_dir, subject_id + '_R2_statMap_saggital_plots.gif') 
    axial_gif = os.path.join(first_output_dir, subject_id + '_R2_statMap_axial_plots.gif') 
    coronal_gif = os.path.join(first_output_dir, subject_id + '_R2_statMap_coronal_plots.gif') 
    saggital_gif_eigen1 = os.path.join(first_output_dir, subject_id + '_eigen1_statMap_saggital_plots.gif') 
    axial_gif_eigen1 = os.path.join(first_output_dir, subject_id + '_eigen1_statMap_axial_plots.gif') 
    coronal_gif_eigen1 = os.path.join(first_output_dir, subject_id + '_eigen1_statMap_coronal_plots.gif')   
    saggital_gif_eigen2 = os.path.join(first_output_dir, subject_id + '_eigen2_statMap_saggital_plots.gif') 
    axial_gif_eigen2 = os.path.join(first_output_dir, subject_id + '_eigen2_statMap_axial_plots.gif') 
    coronal_gif_eigen2 = os.path.join(first_output_dir, subject_id + '_eigen2_statMap_coronal_plots.gif') 
    saggital_gif_eigen3 = os.path.join(first_output_dir, subject_id + '_eigen3_statMap_saggital_plots.gif') 
    axial_gif_eigen3 = os.path.join(first_output_dir, subject_id + '_eigen3_statMap_axial_plots.gif') 
    coronal_gif_eigen3 = os.path.join(first_output_dir, subject_id + '_eigen3_statMap_coronal_plots.gif') 
    saggital_gif_log = os.path.join(first_output_dir, subject_id + '_log10pMVN_statMap_saggital_plots.gif') 
    axial_gif_log = os.path.join(first_output_dir, subject_id + '_log10pMVN_statMap_axial_plots.gif') 
    coronal_gif_log = os.path.join(first_output_dir, subject_id + '_log10pMVN_statMap_coronal_plots.gif')     
    os.system('mv %s %s; mv %s %s; mv %s %s; mv %s %s; mv %s %s; mv %s %s; mv %s %s; mv %s %s; mv %s %s; mv %s %s; mv %s %s; mv %s %s; mv %s %s; mv %s %s; mv %s %s' % (saggital_gif, plot_folder, axial_gif, plot_folder, coronal_gif, plot_folder,
                                                                                                                                                                        saggital_gif_eigen1, plot_folder, axial_gif_eigen1, plot_folder, coronal_gif_eigen1, plot_folder,
                                                                                                                                                                        saggital_gif_eigen2, plot_folder, axial_gif_eigen2, plot_folder, coronal_gif_eigen2, plot_folder,
                                                                                                                                                                        saggital_gif_eigen3, plot_folder, axial_gif_eigen3, plot_folder, coronal_gif_eigen3, plot_folder,
                                                                                                                                                                        saggital_gif_log, plot_folder, axial_gif_log, plot_folder, coronal_gif_log, plot_folder))
    html_file = open('%s/index.html' % (first_output_dir, subject_id),'w')
    html_content = """
    <h1>Lateral Surface</h1>\n \
    <img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="Saggital">\n \
    <img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="Axial">\n \
    <p style="clear: both;">\n \ 
    <h1>Medial Surface</h1>\n \        
    <img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="Saggital">\n \
    <img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="Axial">\n \
    <p style="clear: both;">\n \  
    <h1>R2</h1>\n \
    <img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="Saggital">\n \
    <img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="Axial">\n \
    <img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="Coronal">\n \
    <p style="clear: both;">\n \      
    <h1>Eigen1</h1>\n \
    <img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="Saggital">\n \
    <img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="Axial">\n \
    <img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="Coronal">\n \
    <p style="clear: both;">\n \
    <h1>Eigen2</h1>\n \
    <img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="Saggital">\n \
    <img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="Axial">\n \
    <img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="Coronal">\n \
    <p style="clear: both;">\n \ 
    <h1>Eigen3</h1>\n \
    <img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="Saggital">\n \
    <img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="Axial">\n \
    <img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="Coronal">\n \
    <p style="clear: both;">\n \
    <h1>log10pMVN</h1>\n \
    <img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="Saggital">\n \
    <img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="Axial">\n \
    <img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="Coronal">\n \
    <p style="clear: both;">
    """ % ('images/%s_left_lateral.png' % subject_id,
           'images/%s_right_lateral.png' % subject_id,
           'images/%s_left_medial.png' % subject_id,
           'images/%s_right_medial.png' % subject_id,
           'images/%s_R2_statMap_saggital_plots.gif' % subject_id,
           'images/%s_R2_statMap_axial_plots.gif' % subject_id,
           'images/%s_R2_statMap_coronal_plots.gif' % subject_id,
           'images/%s_eigen1_statMap_axial_plots.gif' % subject_id,
           'images/%s_eigen1_statMap_axial_plots.gif' % subject_id,
           'images/%s_eigen1_statMap_axial_plots.gif' % subject_id,
           'images/%s_eigen2_statMap_axial_plots.gif' % subject_id,
           'images/%s_eigen2_statMap_axial_plots.gif' % subject_id,
           'images/%s_eigen2_statMap_axial_plots.gif' % subject_id,
           'images/%s_eigen3_statMap_axial_plots.gif' % subject_id,
           'images/%s_eigen3_statMap_axial_plots.gif' % subject_id,
           'images/%s_eigen3_statMap_axial_plots.gif' % subject_id,
           'images/%s_log10pMVN_statMap_axial_plots.gif' % subject_id,
           'images/%s_log10pMVN_statMap_axial_plots.gif' % subject_id,
           'images/%s_log10pMVN_statMap_axial_plots.gif' % subject_id)
        
    html_file.write(html_content)
    html_file.close()   
    os.system('cd %s; zip -q -r %s images *.html' % (first_output_dir, os.path.join(final_output_dir, subject_id + '_results.html.zip')))